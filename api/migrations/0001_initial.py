# Generated by Django 5.2 on 2025-07-11 12:44

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Nom de la catégorie')),
                ('description', models.TextField(blank=True, verbose_name='Description de la catégorie')),
                ('cemac_hs_code_prefix', models.CharField(blank=True, help_text='Préfixe du code SH (Système Harmonisé) pour cette catégorie, ex: 6403 pour chaussures.', max_length=10, null=True, unique=True, verbose_name='Préfixe Code SH CEMAC')),
            ],
            options={
                'verbose_name': 'Catégorie de Produit',
                'verbose_name_plural': 'Catégories de Produits',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('is_professional', models.BooleanField(default=False, help_text="Indique si l'utilisateur est un professionnel ou non.")),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ImporterProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=255)),
                ('legal_personality', models.CharField(choices=[('PF', 'Personne Physique'), ('PM', 'Personne Morale')], default='PF', max_length=2)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='importer_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Profil Importateur',
                'verbose_name_plural': 'Profils Importateurs',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Nom du produit')),
                ('tariff_species', models.CharField(choices=[('VG1', 'Biens de 1ère nécessité (5%)'), ('MP', 'Matières premières (10%)'), ('BID', 'Biens intermédiaires et divers (20%)'), ('BCC', 'Biens de consommation courante (30%)')], default='BCC', max_length=3, verbose_name='Espèce tarifaire')),
                ('cemac_hs_code', models.CharField(help_text='Code du Système Harmonisé (SH) complet pour le produit (ex: 6403.99.00.00).', max_length=12, unique=True, verbose_name='Code SH CEMAC')),
                ('is_luxury', models.BooleanField(default=False, verbose_name='Produit de luxe')),
                ('is_alcohol_tobacco', models.BooleanField(default=False, verbose_name='Alcool ou Tabac')),
                ('is_vehicle', models.BooleanField(default=False, verbose_name='Véhicule')),
                ('is_phytosanitary', models.BooleanField(default=False, verbose_name='Nécessite Taxe Phytosanitaire')),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='api.productcategory', verbose_name='Catégorie')),
            ],
            options={
                'verbose_name': 'Produit Douanier',
                'verbose_name_plural': 'Produits Douaniers',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Simulation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('declared_value', models.DecimalField(decimal_places=2, max_digits=15, verbose_name='Valeur Déclarée (VD)')),
                ('transport_cost', models.DecimalField(decimal_places=2, default=0, max_digits=15, verbose_name='Coût de Transport')),
                ('handling_cost', models.DecimalField(decimal_places=2, default=0, max_digits=15, verbose_name='Coût de Manutention')),
                ('weight_in_tons', models.DecimalField(decimal_places=3, default=0, max_digits=10, verbose_name='Poids en Tonnes (pour taxe phytosanitaire)')),
                ('has_niu', models.BooleanField(default=True, verbose_name="Opérateur a un NIU (Numéro d'Identifiant Unique)")),
                ('simulated_at', models.DateTimeField(auto_now_add=True, verbose_name='Date et heure de la simulation')),
                ('is_paid', models.BooleanField(default=False, verbose_name='Paiement confirmé')),
                ('payment_confirmation_code', models.CharField(blank=True, max_length=50, null=True, unique=True, verbose_name='Code de confirmation de paiement')),
                ('response_email_sent', models.BooleanField(default=False, verbose_name='Email de réponse envoyé')),
                ('customs_value_vd', models.DecimalField(decimal_places=2, default=0, max_digits=15, verbose_name='Valeur en Douane (VD) calculée')),
                ('customs_duty_dd', models.DecimalField(decimal_places=2, default=0, max_digits=15, verbose_name='Droits de Douane (DD)')),
                ('excise_duty_da', models.DecimalField(decimal_places=2, default=0, max_digits=15, verbose_name="Droits d'Accise (DA)")),
                ('vat_tva', models.DecimalField(decimal_places=2, default=0, max_digits=15, verbose_name='TVA')),
                ('communal_additional_cac', models.DecimalField(decimal_places=2, default=0, max_digits=15, verbose_name='Centimes Additionnels Communaux (CAC)')),
                ('it_royalty_ri', models.DecimalField(decimal_places=2, default=0, max_digits=15, verbose_name='Redevance Informatique (RI)')),
                ('community_integration_tci', models.DecimalField(decimal_places=2, default=0, max_digits=15, verbose_name="Taxe Communautaire d'Intégration (TCI)")),
                ('integration_contribution_cia', models.DecimalField(decimal_places=2, default=0, max_digits=15, verbose_name="Contribution pour l'Intégration (CIA)")),
                ('ohada_levy_pro', models.DecimalField(decimal_places=2, default=0, max_digits=15, verbose_name='Prélèvement OHADA (PRO)')),
                ('purchase_prepayment_prd', models.DecimalField(decimal_places=2, default=0, max_digits=15, verbose_name='Précompte sur Achat (PRD)')),
                ('guce_facilitation_fee', models.DecimalField(decimal_places=2, default=12500, max_digits=15, verbose_name='Frais de Facilitation GUCE')),
                ('phytosanitary_tax', models.DecimalField(decimal_places=2, default=0, max_digits=15, verbose_name='Taxe Phytosanitaire')),
                ('tel_fee', models.DecimalField(decimal_places=2, default=10000, max_digits=15, verbose_name='Frais TEL')),
                ('total_customs_cost', models.DecimalField(decimal_places=2, default=0, max_digits=15, verbose_name='Coût total des douanes')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.product', verbose_name='Produit simulé')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='simulations', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Simulation de Coût Douanier',
                'verbose_name_plural': 'Simulations de Coûts Douaniers',
                'ordering': ['-simulated_at'],
            },
        ),
    ]
